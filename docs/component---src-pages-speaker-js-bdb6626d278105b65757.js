(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{144:function(g,I,b){"use strict";b.r(I);var C=b(0),G=b.n(C),A=b(147),l=b(148),c=b(152),Z=b(151),X=Object(A.b)("div",{label:"Page",target:"erp26vn0"})("background-image:linear-gradient(#000,var(--color_blur_dark));padding-top:200px;padding-bottom:100px;",l.b.s,"{padding-top:160px;padding-bottom:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),d=Object(A.b)("section",{label:"SpeakerSection",target:"erp26vn1"})("max-width:var(--layout_width_size_large);margin:0 auto;padding:0 var(--padding_size);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),W=Object(A.b)("img",{label:"Image",target:"erp26vn2"})("width:610px;height:610px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),B=Object(A.b)("div",{label:"SpeakerWrapper",target:"erp26vn3"})("display:flex;flex-direction:row;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),V=Object(A.b)("div",{label:"DetailWrapper",target:"erp26vn4"})("display:flex;flex-direction:column;position:relative;padding-left:65px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWdlcy9zcGVha2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtDZ0MiLCJmaWxlIjoic3JjL3BhZ2VzL3NwZWFrZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbS9Qcm9qZWN0cy91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IG1xIGZyb20gJy4uLy4uL3V0aWxzL21lZGlhLXF1ZXJ5J1xuXG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvbGF5b3V0J1xuaW1wb3J0IEZvb3QgZnJvbSAnLi4vY29tcG9uZW50cy9Gb290J1xuXG5jb25zdCBQYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCMwMDAsIHZhcigtLWNvbG9yX2JsdXJfZGFyaykpO1xuXG4gIHBhZGRpbmctdG9wOiAyMDBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xuICAke21xLnN9IHtcbiAgICBwYWRkaW5nLXRvcDogMTYwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gIH1cbmBcblxuY29uc3QgU3BlYWtlclNlY3Rpb24gPSBzdHlsZWQuc2VjdGlvbmBcbiAgbWF4LXdpZHRoOiB2YXIoLS1sYXlvdXRfd2lkdGhfc2l6ZV9sYXJnZSk7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmdfc2l6ZSk7XG5gXG5cbmNvbnN0IEltYWdlID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDYxMHB4O1xuICBoZWlnaHQ6IDYxMHB4O1xuYFxuXG5jb25zdCBTcGVha2VyV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG5gXG5cbmNvbnN0IERldGFpbFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmctbGVmdDogNjVweDtcbmBcblxuY29uc3QgRmlyc3ROYW1lVGl0bGUgPSBzdHlsZWQuaDFgXG4gIGZvbnQtc2l6ZTogMTAwcHg7XG4gIGZvbnQtd2VpZ2h0OiA5MDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuYFxuY29uc3QgTGFzdE5hbWVUaXRsZSA9IHN0eWxlZChGaXJzdE5hbWVUaXRsZSlgXG4gIHBhZGRpbmctbGVmdDogNDBweDtcbmBcblxuY29uc3QgU3VidGl0bGUgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIHdpZHRoOiA1NzBweDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbmBcblxuY29uc3QgRGF0ZVRpbWUgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiByZ2JhKDIzMiwgMjMyLCAyMzIsIDAuNik7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG5gXG5cbmNvbnN0IFRvcGljID0gc3R5bGVkLmgxYFxuICBmb250LXNpemU6IDM2cHg7XG4gIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICBsaW5lLWhlaWdodDogMS4yO1xuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuYFxuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5gXG5cbmNvbnN0IEJsdWVDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuYFxuXG5jb25zdCBMaXN0V3JhcHBlciA9IHN0eWxlZC51bGBcbiAgbGlzdC1zdHlsZTogY2lyY2xlIG91dHNpZGUgbm9uZTtcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuYFxuXG5jb25zdCBMaXN0SXRlbSA9IHN0eWxlZC5saWBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgbGluZS1oZWlnaHQ6IDI7XG5gXG5cbmNvbnN0IENoYW5nZVBhZ2VTZWN0aW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcbmBcblxuY29uc3QgQ2hhbmdlUGFnZVRpdGxlID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDM2cHg7XG4gIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gXG5cbmNvbnN0IE5hbWVJbWFnZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogNDBweDtcbmBcblxuY29uc3QgTmFtZVRleHQgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMzM1cHg7XG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfYmx1cl9kYXJrKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsaW5lLWhlaWdodDogMS4xO1xuICB0ZXh0LXNoYWRvdzogMCA0cHggNHB4IHJnYmEoMTUsIDI5LCA3OSwgMC4yNSk7XG5gXG5cbmNvbnN0IE5hbWVUZXh0TGVmdCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgbGVmdDogMjBweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmBcblxuY29uc3QgTmFtZVRleHRSaWdodCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgcmlnaHQ6IDIwcHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuYFxuXG5jb25zdCBOYW1lSW1hZ2VMZWZ0ID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG5gXG5cbmNvbnN0IE5hbWVJbWFnZVJpZ2h0ID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBtYXJnaW4tbGVmdDogMjBweDtcbmBcblxuY29uc3QgSW1hZ2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gXG5cbmNvbnN0IFNwZWFrZXIgPSAoKSA9PiAoXG4gIDxMYXlvdXQ+XG4gICAgPFBhZ2U+XG4gICAgICA8U3BlYWtlclNlY3Rpb24+XG4gICAgICAgIDxTcGVha2VyV3JhcHBlcj5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPVwiaW1hZ2VzL3NwZWFrZXJzL3Nwa19KYXJlZFNwb29sQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgPERldGFpbFdyYXBwZXI+XG4gICAgICAgICAgICA8Rmlyc3ROYW1lVGl0bGU+SkFSRUQ8L0ZpcnN0TmFtZVRpdGxlPlxuICAgICAgICAgICAgPExhc3ROYW1lVGl0bGU+U1BPT0w8L0xhc3ROYW1lVGl0bGU+XG4gICAgICAgICAgICA8U3VidGl0bGU+XG4gICAgICAgICAgICAgIGlzIGEgTWFrZXIgb2YgQXdlc29tZW5lc3MgYXQgQ2VudGVyIENlbnRyZS9VSUUgYW5kIG9uZSBvZiB0aGUgbGVhZGluZyBleHBlcnRzIGluIHVzZXJcbiAgICAgICAgICAgICAgZXhwZXJpZW5jZS5cbiAgICAgICAgICAgIDwvU3VidGl0bGU+XG4gICAgICAgICAgICA8RGF0ZVRpbWU+MjMgRmVicnVhcnkgMjAxOCwgOTowMCAtIDEwOjMwPC9EYXRlVGltZT5cbiAgICAgICAgICAgIDxUb3BpYz7igJxUaGUgRXZvbHV0aW9uIG9mIGEgTmV3IFVYIERlc2lnbiBSZXNvbHV0aW9u4oCdPC9Ub3BpYz5cbiAgICAgICAgICAgIDxDb250ZW50PlxuICAgICAgICAgICAgICBEZXNpZ24gd29ya3Mgb24gbWFueSBsZXZlbHMuIFdlIGNhbiB6b29tIGluIHRvIHRoZSBzY3JlZW4gbGV2ZWwsIGxvb2tpbmcgZGlyZWN0bHkgYXRcbiAgICAgICAgICAgICAgd2hhdCBpbiB0aGUgaW50ZXJhY3Rpb25zIG9uIGEgc2luZ2xlIHNjcmVlbiBvciBwYWdlLiBXZSBjYW4gem9vbSBvdXQgYSBsaXR0bGUgdG8gbG9va1xuICAgICAgICAgICAgICBhdCBhbiBlbnRpcmUgYXBwbGljYXRpb27igJlzIGRlc2lnbiwgdW5kZXJzdGFuZGluZyBob3cgc2NyZWVucyB3b3JrIHRvZ2V0aGVyLiBPciB3ZSBjYW5cbiAgICAgICAgICAgICAgcHVsbCBiYWNrIHRvIGFuIG9yZ2FuaXphdGlvbiBsZXZlbCwgd29ya2luZyB0byBjb25uZWN0IGFwcGxpY2F0aW9ucyBhbmQgb3RoZXIgc2VydmljZXNcbiAgICAgICAgICAgICAgdG9nZXRoZXIuXG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgTG9va2luZyBhdCBkZXNpZ24gdGhyb3VnaCBkaWZmZXJlbnQgbGV2ZWxzIG9mIHJlc29sdXRpb24gaGVscHMgdXMgYW5zd2VyIHNvbWVcbiAgICAgICAgICAgICAgaW1wb3J0YW50IHF1ZXN0aW9ucy4gSXMgdGhlcmUgYSBkaWZmZXJlbmNlIGJldHdlZW4gVVggYW5kIFVJLCBhbmQgaWYgc28sIGhvdyBkb2VzIHRoYXRcbiAgICAgICAgICAgICAgY2hhbmdlIGhvdyB0ZWFtcyBzaG91bGQgb3BlcmF0ZT8gV2hhdCBpcyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcHJvZHVjdCBkZXNpZ24gYW5kXG4gICAgICAgICAgICAgIHNlcnZpY2UgZGVzaWduPyBIb3cgZG8gd2Ugc3RhcnQgcHJlcGFyaW5nIGZvciB3aGF0IGNvbWVzIG5leHQ/XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgSW4gdGhpcyBlbnRlcnRhaW5pbmcgdGFsaywgSmFyZWQgZXhwbG9yZXMgdGhlIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiB0aGVzZSBuZXcgbGV2ZWxzXG4gICAgICAgICAgICAgIG9mIHJlc29sdXRpb24uIEhl4oCZbGwgaW50cm9kdWNlIHlvdSB0byBhIGxldmVsIG9mIGRlc2lnbiBiZXlvbmQgdGhlIG9yZ2FuaXphdGlvbiBsZXZlbFxuICAgICAgICAgICAgICBhbmQgeW91IGhvdyB3ZeKAmWxsIG5lZWQgdG8gc3RhcnQgZGVzaWduaW5nIGJleW9uZCBvcmdhbml6YXRpb25hbCBib3VuZGFyaWVzLCBhbmQgd2hhdFxuICAgICAgICAgICAgICB0aGF0IGltcGxpZXMuIEhl4oCZbGwgaW50cm9kdWNlIHlvdSB0byB0aGUgcGlvbmVlcnMgb2YgdGhpcyBuZXcgZGVzaWduIGFyZWEsIGFuZCBleHBsYWluXG4gICAgICAgICAgICAgIHRoZSBwcm9jZXNzIGJ5IHdoaWNoIGRlc2lnbmVycyBldmVyeXdoZXJlIHdpbGwgbmVlZCB0byBkZXZlbG9wIHRoZWlyIGV4cGVydGlzZS5cbiAgICAgICAgICAgIDwvQ29udGVudD5cbiAgICAgICAgICAgIDxCbHVlQ29udGVudD5KYXJlZCB3aWxsIHNob3cgeW91OjwvQmx1ZUNvbnRlbnQ+XG4gICAgICAgICAgICA8TGlzdFdyYXBwZXI+XG4gICAgICAgICAgICAgIDxMaXN0SXRlbT5cbiAgICAgICAgICAgICAgICBXaGVyZSBkZXNpZ25lcnMgZmFsbCBpbnRvIHRoZSBkYW5nZXJvdXMgdHJhcCBvZiB0aGlua2luZyB0b28gbmFycm93bHkgYWJvdXQgdGhlaXJcbiAgICAgICAgICAgICAgICBjYXJlZXJcbiAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgICAgPExpc3RJdGVtPlxuICAgICAgICAgICAgICAgIEhvdyB0aGVyZeKAmXMgc3RpbGwgYSBmcm9udGllciBvZiB1bnNvbHZlZCBpc3N1ZXMgdGhhdCBwaW9uZWVyaW5nIGRlc2lnbmVycyBuZWVkIHRvXG4gICAgICAgICAgICAgICAgZXhwbG9yZVxuICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAgICA8TGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgV2hhdCB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcGlvbmVlcnMsIHNldHRsZXJzLCBhbmQgdG93biBwbGFubmVycyBhcmUsIHdoZW4gaXRcbiAgICAgICAgICAgICAgICBjb21lcyB0byBkZXNpZ24gY3JhZnRcbiAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDwvTGlzdFdyYXBwZXI+XG4gICAgICAgICAgPC9EZXRhaWxXcmFwcGVyPlxuICAgICAgICA8L1NwZWFrZXJXcmFwcGVyPlxuICAgICAgICA8Q2hhbmdlUGFnZVNlY3Rpb24+XG4gICAgICAgICAgPENoYW5nZVBhZ2VUaXRsZT5XYW50IHRvIGtub3cgbW9yZS4uLiA/PC9DaGFuZ2VQYWdlVGl0bGU+XG4gICAgICAgICAgPE5hbWVJbWFnZVdyYXBwZXI+XG4gICAgICAgICAgICA8SW1hZ2VXcmFwcGVyPlxuICAgICAgICAgICAgICA8TmFtZUltYWdlTGVmdCBzcmM9XCJpbWFnZXMvc3BlYWtlcnMvc3BrX0xpYW1IdXRjaGluc29uQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgICAgIDxOYW1lVGV4dExlZnQ+IExJQU0gSFVUQ0hJTlNPTiA8L05hbWVUZXh0TGVmdD5cbiAgICAgICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgICAgICAgPEltYWdlV3JhcHBlcj5cbiAgICAgICAgICAgICAgPE5hbWVJbWFnZVJpZ2h0IHNyYz1cImltYWdlcy9zcGVha2Vycy9zcGtfRGFuYUNoaXNuZWxsQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgICAgIDxOYW1lVGV4dFJpZ2h0PiBEQU5BIENISVNORUxMIDwvTmFtZVRleHRSaWdodD5cbiAgICAgICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgICAgIDwvTmFtZUltYWdlV3JhcHBlcj5cbiAgICAgICAgPC9DaGFuZ2VQYWdlU2VjdGlvbj5cbiAgICAgIDwvU3BlYWtlclNlY3Rpb24+XG4gICAgPC9QYWdlPlxuICAgIDxGb290IC8+XG4gIDwvTGF5b3V0PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBTcGVha2VyXG4iXX0= */"),u=Object(A.b)("h1",{label:"FirstNameTitle",target:"erp26vn5"})("font-size:100px;font-weight:900;font-style:italic;line-height:1.1;color:var(--color_blue);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),m=Object(A.b)(u,{label:"LastNameTitle",target:"erp26vn6"})("padding-left:40px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),i=Object(A.b)("h2",{label:"Subtitle",target:"erp26vn7"})("font-size:24px;font-weight:200;font-style:italic;color:var(--color_grey_super_light);width:570px;margin-top:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),a=Object(A.b)("p",{label:"DateTime",target:"erp26vn8"})("font-size:14px;font-weight:normal;font-style:italic;color:rgba(232,232,232,0.6);margin-top:40px;margin-bottom:10px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Y=Object(A.b)("h1",{label:"Topic",target:"erp26vn9"})("font-size:36px;font-weight:200;font-style:italic;color:var(--color_blue);line-height:1.2;margin-bottom:40px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),x=Object(A.b)("p",{label:"Content",target:"erp26vn10"})("font-size:14px;font-weight:300;font-style:italic;color:var(--color_grey_super_light);margin-bottom:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWdlcy9zcGVha2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStFd0IiLCJmaWxlIjoic3JjL3BhZ2VzL3NwZWFrZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbS9Qcm9qZWN0cy91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IG1xIGZyb20gJy4uLy4uL3V0aWxzL21lZGlhLXF1ZXJ5J1xuXG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvbGF5b3V0J1xuaW1wb3J0IEZvb3QgZnJvbSAnLi4vY29tcG9uZW50cy9Gb290J1xuXG5jb25zdCBQYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCMwMDAsIHZhcigtLWNvbG9yX2JsdXJfZGFyaykpO1xuXG4gIHBhZGRpbmctdG9wOiAyMDBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xuICAke21xLnN9IHtcbiAgICBwYWRkaW5nLXRvcDogMTYwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gIH1cbmBcblxuY29uc3QgU3BlYWtlclNlY3Rpb24gPSBzdHlsZWQuc2VjdGlvbmBcbiAgbWF4LXdpZHRoOiB2YXIoLS1sYXlvdXRfd2lkdGhfc2l6ZV9sYXJnZSk7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmdfc2l6ZSk7XG5gXG5cbmNvbnN0IEltYWdlID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDYxMHB4O1xuICBoZWlnaHQ6IDYxMHB4O1xuYFxuXG5jb25zdCBTcGVha2VyV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG5gXG5cbmNvbnN0IERldGFpbFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmctbGVmdDogNjVweDtcbmBcblxuY29uc3QgRmlyc3ROYW1lVGl0bGUgPSBzdHlsZWQuaDFgXG4gIGZvbnQtc2l6ZTogMTAwcHg7XG4gIGZvbnQtd2VpZ2h0OiA5MDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuYFxuY29uc3QgTGFzdE5hbWVUaXRsZSA9IHN0eWxlZChGaXJzdE5hbWVUaXRsZSlgXG4gIHBhZGRpbmctbGVmdDogNDBweDtcbmBcblxuY29uc3QgU3VidGl0bGUgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIHdpZHRoOiA1NzBweDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbmBcblxuY29uc3QgRGF0ZVRpbWUgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiByZ2JhKDIzMiwgMjMyLCAyMzIsIDAuNik7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG5gXG5cbmNvbnN0IFRvcGljID0gc3R5bGVkLmgxYFxuICBmb250LXNpemU6IDM2cHg7XG4gIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICBsaW5lLWhlaWdodDogMS4yO1xuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuYFxuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5gXG5cbmNvbnN0IEJsdWVDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuYFxuXG5jb25zdCBMaXN0V3JhcHBlciA9IHN0eWxlZC51bGBcbiAgbGlzdC1zdHlsZTogY2lyY2xlIG91dHNpZGUgbm9uZTtcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuYFxuXG5jb25zdCBMaXN0SXRlbSA9IHN0eWxlZC5saWBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgbGluZS1oZWlnaHQ6IDI7XG5gXG5cbmNvbnN0IENoYW5nZVBhZ2VTZWN0aW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcbmBcblxuY29uc3QgQ2hhbmdlUGFnZVRpdGxlID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDM2cHg7XG4gIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gXG5cbmNvbnN0IE5hbWVJbWFnZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogNDBweDtcbmBcblxuY29uc3QgTmFtZVRleHQgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMzM1cHg7XG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfYmx1cl9kYXJrKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsaW5lLWhlaWdodDogMS4xO1xuICB0ZXh0LXNoYWRvdzogMCA0cHggNHB4IHJnYmEoMTUsIDI5LCA3OSwgMC4yNSk7XG5gXG5cbmNvbnN0IE5hbWVUZXh0TGVmdCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgbGVmdDogMjBweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmBcblxuY29uc3QgTmFtZVRleHRSaWdodCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgcmlnaHQ6IDIwcHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuYFxuXG5jb25zdCBOYW1lSW1hZ2VMZWZ0ID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG5gXG5cbmNvbnN0IE5hbWVJbWFnZVJpZ2h0ID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBtYXJnaW4tbGVmdDogMjBweDtcbmBcblxuY29uc3QgSW1hZ2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gXG5cbmNvbnN0IFNwZWFrZXIgPSAoKSA9PiAoXG4gIDxMYXlvdXQ+XG4gICAgPFBhZ2U+XG4gICAgICA8U3BlYWtlclNlY3Rpb24+XG4gICAgICAgIDxTcGVha2VyV3JhcHBlcj5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPVwiaW1hZ2VzL3NwZWFrZXJzL3Nwa19KYXJlZFNwb29sQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgPERldGFpbFdyYXBwZXI+XG4gICAgICAgICAgICA8Rmlyc3ROYW1lVGl0bGU+SkFSRUQ8L0ZpcnN0TmFtZVRpdGxlPlxuICAgICAgICAgICAgPExhc3ROYW1lVGl0bGU+U1BPT0w8L0xhc3ROYW1lVGl0bGU+XG4gICAgICAgICAgICA8U3VidGl0bGU+XG4gICAgICAgICAgICAgIGlzIGEgTWFrZXIgb2YgQXdlc29tZW5lc3MgYXQgQ2VudGVyIENlbnRyZS9VSUUgYW5kIG9uZSBvZiB0aGUgbGVhZGluZyBleHBlcnRzIGluIHVzZXJcbiAgICAgICAgICAgICAgZXhwZXJpZW5jZS5cbiAgICAgICAgICAgIDwvU3VidGl0bGU+XG4gICAgICAgICAgICA8RGF0ZVRpbWU+MjMgRmVicnVhcnkgMjAxOCwgOTowMCAtIDEwOjMwPC9EYXRlVGltZT5cbiAgICAgICAgICAgIDxUb3BpYz7igJxUaGUgRXZvbHV0aW9uIG9mIGEgTmV3IFVYIERlc2lnbiBSZXNvbHV0aW9u4oCdPC9Ub3BpYz5cbiAgICAgICAgICAgIDxDb250ZW50PlxuICAgICAgICAgICAgICBEZXNpZ24gd29ya3Mgb24gbWFueSBsZXZlbHMuIFdlIGNhbiB6b29tIGluIHRvIHRoZSBzY3JlZW4gbGV2ZWwsIGxvb2tpbmcgZGlyZWN0bHkgYXRcbiAgICAgICAgICAgICAgd2hhdCBpbiB0aGUgaW50ZXJhY3Rpb25zIG9uIGEgc2luZ2xlIHNjcmVlbiBvciBwYWdlLiBXZSBjYW4gem9vbSBvdXQgYSBsaXR0bGUgdG8gbG9va1xuICAgICAgICAgICAgICBhdCBhbiBlbnRpcmUgYXBwbGljYXRpb27igJlzIGRlc2lnbiwgdW5kZXJzdGFuZGluZyBob3cgc2NyZWVucyB3b3JrIHRvZ2V0aGVyLiBPciB3ZSBjYW5cbiAgICAgICAgICAgICAgcHVsbCBiYWNrIHRvIGFuIG9yZ2FuaXphdGlvbiBsZXZlbCwgd29ya2luZyB0byBjb25uZWN0IGFwcGxpY2F0aW9ucyBhbmQgb3RoZXIgc2VydmljZXNcbiAgICAgICAgICAgICAgdG9nZXRoZXIuXG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgTG9va2luZyBhdCBkZXNpZ24gdGhyb3VnaCBkaWZmZXJlbnQgbGV2ZWxzIG9mIHJlc29sdXRpb24gaGVscHMgdXMgYW5zd2VyIHNvbWVcbiAgICAgICAgICAgICAgaW1wb3J0YW50IHF1ZXN0aW9ucy4gSXMgdGhlcmUgYSBkaWZmZXJlbmNlIGJldHdlZW4gVVggYW5kIFVJLCBhbmQgaWYgc28sIGhvdyBkb2VzIHRoYXRcbiAgICAgICAgICAgICAgY2hhbmdlIGhvdyB0ZWFtcyBzaG91bGQgb3BlcmF0ZT8gV2hhdCBpcyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcHJvZHVjdCBkZXNpZ24gYW5kXG4gICAgICAgICAgICAgIHNlcnZpY2UgZGVzaWduPyBIb3cgZG8gd2Ugc3RhcnQgcHJlcGFyaW5nIGZvciB3aGF0IGNvbWVzIG5leHQ/XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgSW4gdGhpcyBlbnRlcnRhaW5pbmcgdGFsaywgSmFyZWQgZXhwbG9yZXMgdGhlIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiB0aGVzZSBuZXcgbGV2ZWxzXG4gICAgICAgICAgICAgIG9mIHJlc29sdXRpb24uIEhl4oCZbGwgaW50cm9kdWNlIHlvdSB0byBhIGxldmVsIG9mIGRlc2lnbiBiZXlvbmQgdGhlIG9yZ2FuaXphdGlvbiBsZXZlbFxuICAgICAgICAgICAgICBhbmQgeW91IGhvdyB3ZeKAmWxsIG5lZWQgdG8gc3RhcnQgZGVzaWduaW5nIGJleW9uZCBvcmdhbml6YXRpb25hbCBib3VuZGFyaWVzLCBhbmQgd2hhdFxuICAgICAgICAgICAgICB0aGF0IGltcGxpZXMuIEhl4oCZbGwgaW50cm9kdWNlIHlvdSB0byB0aGUgcGlvbmVlcnMgb2YgdGhpcyBuZXcgZGVzaWduIGFyZWEsIGFuZCBleHBsYWluXG4gICAgICAgICAgICAgIHRoZSBwcm9jZXNzIGJ5IHdoaWNoIGRlc2lnbmVycyBldmVyeXdoZXJlIHdpbGwgbmVlZCB0byBkZXZlbG9wIHRoZWlyIGV4cGVydGlzZS5cbiAgICAgICAgICAgIDwvQ29udGVudD5cbiAgICAgICAgICAgIDxCbHVlQ29udGVudD5KYXJlZCB3aWxsIHNob3cgeW91OjwvQmx1ZUNvbnRlbnQ+XG4gICAgICAgICAgICA8TGlzdFdyYXBwZXI+XG4gICAgICAgICAgICAgIDxMaXN0SXRlbT5cbiAgICAgICAgICAgICAgICBXaGVyZSBkZXNpZ25lcnMgZmFsbCBpbnRvIHRoZSBkYW5nZXJvdXMgdHJhcCBvZiB0aGlua2luZyB0b28gbmFycm93bHkgYWJvdXQgdGhlaXJcbiAgICAgICAgICAgICAgICBjYXJlZXJcbiAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgICAgPExpc3RJdGVtPlxuICAgICAgICAgICAgICAgIEhvdyB0aGVyZeKAmXMgc3RpbGwgYSBmcm9udGllciBvZiB1bnNvbHZlZCBpc3N1ZXMgdGhhdCBwaW9uZWVyaW5nIGRlc2lnbmVycyBuZWVkIHRvXG4gICAgICAgICAgICAgICAgZXhwbG9yZVxuICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAgICA8TGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgV2hhdCB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcGlvbmVlcnMsIHNldHRsZXJzLCBhbmQgdG93biBwbGFubmVycyBhcmUsIHdoZW4gaXRcbiAgICAgICAgICAgICAgICBjb21lcyB0byBkZXNpZ24gY3JhZnRcbiAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDwvTGlzdFdyYXBwZXI+XG4gICAgICAgICAgPC9EZXRhaWxXcmFwcGVyPlxuICAgICAgICA8L1NwZWFrZXJXcmFwcGVyPlxuICAgICAgICA8Q2hhbmdlUGFnZVNlY3Rpb24+XG4gICAgICAgICAgPENoYW5nZVBhZ2VUaXRsZT5XYW50IHRvIGtub3cgbW9yZS4uLiA/PC9DaGFuZ2VQYWdlVGl0bGU+XG4gICAgICAgICAgPE5hbWVJbWFnZVdyYXBwZXI+XG4gICAgICAgICAgICA8SW1hZ2VXcmFwcGVyPlxuICAgICAgICAgICAgICA8TmFtZUltYWdlTGVmdCBzcmM9XCJpbWFnZXMvc3BlYWtlcnMvc3BrX0xpYW1IdXRjaGluc29uQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgICAgIDxOYW1lVGV4dExlZnQ+IExJQU0gSFVUQ0hJTlNPTiA8L05hbWVUZXh0TGVmdD5cbiAgICAgICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgICAgICAgPEltYWdlV3JhcHBlcj5cbiAgICAgICAgICAgICAgPE5hbWVJbWFnZVJpZ2h0IHNyYz1cImltYWdlcy9zcGVha2Vycy9zcGtfRGFuYUNoaXNuZWxsQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgICAgIDxOYW1lVGV4dFJpZ2h0PiBEQU5BIENISVNORUxMIDwvTmFtZVRleHRSaWdodD5cbiAgICAgICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgICAgIDwvTmFtZUltYWdlV3JhcHBlcj5cbiAgICAgICAgPC9DaGFuZ2VQYWdlU2VjdGlvbj5cbiAgICAgIDwvU3BlYWtlclNlY3Rpb24+XG4gICAgPC9QYWdlPlxuICAgIDxGb290IC8+XG4gIDwvTGF5b3V0PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBTcGVha2VyXG4iXX0= */"),R=Object(A.b)("p",{label:"BlueContent",target:"erp26vn11"})("font-size:16px;font-weight:300;color:var(--color_blue);margin-bottom:10px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),h=Object(A.b)("ul",{label:"ListWrapper",target:"erp26vn12"})("list-style:circle outside none;padding-left:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),H=Object(A.b)("li",{label:"ListItem",target:"erp26vn13"})("font-size:14px;font-weight:normal;font-style:italic;color:var(--color_grey_super_light);line-height:2;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),y=Object(A.b)("section",{label:"ChangePageSection",target:"erp26vn14"})("padding-top:100px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=Object(A.b)("h2",{label:"ChangePageTitle",target:"erp26vn15"})("font-size:36px;font-weight:200;font-style:italic;color:var(--color_blue);text-align:center;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),N=Object(A.b)("div",{label:"NameImageWrapper",target:"erp26vn16"})("display:flex;flex-direction:row;justify-content:center;margin-top:40px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=Object(A.b)("div",{label:"NameText",target:"erp26vn17"})("width:335px;font-size:48px;font-weight:900;font-style:italic;color:var(--color_blur_dark);position:absolute;line-height:1.1;text-shadow:0 4px 4px rgba(15,29,79,0.25);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),v=Object(A.b)(t,{label:"NameTextLeft",target:"erp26vn18"})("bottom:20px;left:20px;text-align:left;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),F=Object(A.b)(t,{label:"NameTextRight",target:"erp26vn19"})("bottom:20px;right:20px;text-align:right;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWdlcy9zcGVha2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStJc0MiLCJmaWxlIjoic3JjL3BhZ2VzL3NwZWFrZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbS9Qcm9qZWN0cy91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IG1xIGZyb20gJy4uLy4uL3V0aWxzL21lZGlhLXF1ZXJ5J1xuXG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvbGF5b3V0J1xuaW1wb3J0IEZvb3QgZnJvbSAnLi4vY29tcG9uZW50cy9Gb290J1xuXG5jb25zdCBQYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCMwMDAsIHZhcigtLWNvbG9yX2JsdXJfZGFyaykpO1xuXG4gIHBhZGRpbmctdG9wOiAyMDBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xuICAke21xLnN9IHtcbiAgICBwYWRkaW5nLXRvcDogMTYwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gIH1cbmBcblxuY29uc3QgU3BlYWtlclNlY3Rpb24gPSBzdHlsZWQuc2VjdGlvbmBcbiAgbWF4LXdpZHRoOiB2YXIoLS1sYXlvdXRfd2lkdGhfc2l6ZV9sYXJnZSk7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmdfc2l6ZSk7XG5gXG5cbmNvbnN0IEltYWdlID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDYxMHB4O1xuICBoZWlnaHQ6IDYxMHB4O1xuYFxuXG5jb25zdCBTcGVha2VyV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG5gXG5cbmNvbnN0IERldGFpbFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmctbGVmdDogNjVweDtcbmBcblxuY29uc3QgRmlyc3ROYW1lVGl0bGUgPSBzdHlsZWQuaDFgXG4gIGZvbnQtc2l6ZTogMTAwcHg7XG4gIGZvbnQtd2VpZ2h0OiA5MDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuYFxuY29uc3QgTGFzdE5hbWVUaXRsZSA9IHN0eWxlZChGaXJzdE5hbWVUaXRsZSlgXG4gIHBhZGRpbmctbGVmdDogNDBweDtcbmBcblxuY29uc3QgU3VidGl0bGUgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIHdpZHRoOiA1NzBweDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbmBcblxuY29uc3QgRGF0ZVRpbWUgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiByZ2JhKDIzMiwgMjMyLCAyMzIsIDAuNik7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG5gXG5cbmNvbnN0IFRvcGljID0gc3R5bGVkLmgxYFxuICBmb250LXNpemU6IDM2cHg7XG4gIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICBsaW5lLWhlaWdodDogMS4yO1xuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuYFxuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5gXG5cbmNvbnN0IEJsdWVDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuYFxuXG5jb25zdCBMaXN0V3JhcHBlciA9IHN0eWxlZC51bGBcbiAgbGlzdC1zdHlsZTogY2lyY2xlIG91dHNpZGUgbm9uZTtcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuYFxuXG5jb25zdCBMaXN0SXRlbSA9IHN0eWxlZC5saWBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgbGluZS1oZWlnaHQ6IDI7XG5gXG5cbmNvbnN0IENoYW5nZVBhZ2VTZWN0aW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcbmBcblxuY29uc3QgQ2hhbmdlUGFnZVRpdGxlID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDM2cHg7XG4gIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gXG5cbmNvbnN0IE5hbWVJbWFnZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogNDBweDtcbmBcblxuY29uc3QgTmFtZVRleHQgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMzM1cHg7XG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfYmx1cl9kYXJrKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsaW5lLWhlaWdodDogMS4xO1xuICB0ZXh0LXNoYWRvdzogMCA0cHggNHB4IHJnYmEoMTUsIDI5LCA3OSwgMC4yNSk7XG5gXG5cbmNvbnN0IE5hbWVUZXh0TGVmdCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgbGVmdDogMjBweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmBcblxuY29uc3QgTmFtZVRleHRSaWdodCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgcmlnaHQ6IDIwcHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuYFxuXG5jb25zdCBOYW1lSW1hZ2VMZWZ0ID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG5gXG5cbmNvbnN0IE5hbWVJbWFnZVJpZ2h0ID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBtYXJnaW4tbGVmdDogMjBweDtcbmBcblxuY29uc3QgSW1hZ2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gXG5cbmNvbnN0IFNwZWFrZXIgPSAoKSA9PiAoXG4gIDxMYXlvdXQ+XG4gICAgPFBhZ2U+XG4gICAgICA8U3BlYWtlclNlY3Rpb24+XG4gICAgICAgIDxTcGVha2VyV3JhcHBlcj5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPVwiaW1hZ2VzL3NwZWFrZXJzL3Nwa19KYXJlZFNwb29sQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgPERldGFpbFdyYXBwZXI+XG4gICAgICAgICAgICA8Rmlyc3ROYW1lVGl0bGU+SkFSRUQ8L0ZpcnN0TmFtZVRpdGxlPlxuICAgICAgICAgICAgPExhc3ROYW1lVGl0bGU+U1BPT0w8L0xhc3ROYW1lVGl0bGU+XG4gICAgICAgICAgICA8U3VidGl0bGU+XG4gICAgICAgICAgICAgIGlzIGEgTWFrZXIgb2YgQXdlc29tZW5lc3MgYXQgQ2VudGVyIENlbnRyZS9VSUUgYW5kIG9uZSBvZiB0aGUgbGVhZGluZyBleHBlcnRzIGluIHVzZXJcbiAgICAgICAgICAgICAgZXhwZXJpZW5jZS5cbiAgICAgICAgICAgIDwvU3VidGl0bGU+XG4gICAgICAgICAgICA8RGF0ZVRpbWU+MjMgRmVicnVhcnkgMjAxOCwgOTowMCAtIDEwOjMwPC9EYXRlVGltZT5cbiAgICAgICAgICAgIDxUb3BpYz7igJxUaGUgRXZvbHV0aW9uIG9mIGEgTmV3IFVYIERlc2lnbiBSZXNvbHV0aW9u4oCdPC9Ub3BpYz5cbiAgICAgICAgICAgIDxDb250ZW50PlxuICAgICAgICAgICAgICBEZXNpZ24gd29ya3Mgb24gbWFueSBsZXZlbHMuIFdlIGNhbiB6b29tIGluIHRvIHRoZSBzY3JlZW4gbGV2ZWwsIGxvb2tpbmcgZGlyZWN0bHkgYXRcbiAgICAgICAgICAgICAgd2hhdCBpbiB0aGUgaW50ZXJhY3Rpb25zIG9uIGEgc2luZ2xlIHNjcmVlbiBvciBwYWdlLiBXZSBjYW4gem9vbSBvdXQgYSBsaXR0bGUgdG8gbG9va1xuICAgICAgICAgICAgICBhdCBhbiBlbnRpcmUgYXBwbGljYXRpb27igJlzIGRlc2lnbiwgdW5kZXJzdGFuZGluZyBob3cgc2NyZWVucyB3b3JrIHRvZ2V0aGVyLiBPciB3ZSBjYW5cbiAgICAgICAgICAgICAgcHVsbCBiYWNrIHRvIGFuIG9yZ2FuaXphdGlvbiBsZXZlbCwgd29ya2luZyB0byBjb25uZWN0IGFwcGxpY2F0aW9ucyBhbmQgb3RoZXIgc2VydmljZXNcbiAgICAgICAgICAgICAgdG9nZXRoZXIuXG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgTG9va2luZyBhdCBkZXNpZ24gdGhyb3VnaCBkaWZmZXJlbnQgbGV2ZWxzIG9mIHJlc29sdXRpb24gaGVscHMgdXMgYW5zd2VyIHNvbWVcbiAgICAgICAgICAgICAgaW1wb3J0YW50IHF1ZXN0aW9ucy4gSXMgdGhlcmUgYSBkaWZmZXJlbmNlIGJldHdlZW4gVVggYW5kIFVJLCBhbmQgaWYgc28sIGhvdyBkb2VzIHRoYXRcbiAgICAgICAgICAgICAgY2hhbmdlIGhvdyB0ZWFtcyBzaG91bGQgb3BlcmF0ZT8gV2hhdCBpcyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcHJvZHVjdCBkZXNpZ24gYW5kXG4gICAgICAgICAgICAgIHNlcnZpY2UgZGVzaWduPyBIb3cgZG8gd2Ugc3RhcnQgcHJlcGFyaW5nIGZvciB3aGF0IGNvbWVzIG5leHQ/XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgSW4gdGhpcyBlbnRlcnRhaW5pbmcgdGFsaywgSmFyZWQgZXhwbG9yZXMgdGhlIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiB0aGVzZSBuZXcgbGV2ZWxzXG4gICAgICAgICAgICAgIG9mIHJlc29sdXRpb24uIEhl4oCZbGwgaW50cm9kdWNlIHlvdSB0byBhIGxldmVsIG9mIGRlc2lnbiBiZXlvbmQgdGhlIG9yZ2FuaXphdGlvbiBsZXZlbFxuICAgICAgICAgICAgICBhbmQgeW91IGhvdyB3ZeKAmWxsIG5lZWQgdG8gc3RhcnQgZGVzaWduaW5nIGJleW9uZCBvcmdhbml6YXRpb25hbCBib3VuZGFyaWVzLCBhbmQgd2hhdFxuICAgICAgICAgICAgICB0aGF0IGltcGxpZXMuIEhl4oCZbGwgaW50cm9kdWNlIHlvdSB0byB0aGUgcGlvbmVlcnMgb2YgdGhpcyBuZXcgZGVzaWduIGFyZWEsIGFuZCBleHBsYWluXG4gICAgICAgICAgICAgIHRoZSBwcm9jZXNzIGJ5IHdoaWNoIGRlc2lnbmVycyBldmVyeXdoZXJlIHdpbGwgbmVlZCB0byBkZXZlbG9wIHRoZWlyIGV4cGVydGlzZS5cbiAgICAgICAgICAgIDwvQ29udGVudD5cbiAgICAgICAgICAgIDxCbHVlQ29udGVudD5KYXJlZCB3aWxsIHNob3cgeW91OjwvQmx1ZUNvbnRlbnQ+XG4gICAgICAgICAgICA8TGlzdFdyYXBwZXI+XG4gICAgICAgICAgICAgIDxMaXN0SXRlbT5cbiAgICAgICAgICAgICAgICBXaGVyZSBkZXNpZ25lcnMgZmFsbCBpbnRvIHRoZSBkYW5nZXJvdXMgdHJhcCBvZiB0aGlua2luZyB0b28gbmFycm93bHkgYWJvdXQgdGhlaXJcbiAgICAgICAgICAgICAgICBjYXJlZXJcbiAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgICAgPExpc3RJdGVtPlxuICAgICAgICAgICAgICAgIEhvdyB0aGVyZeKAmXMgc3RpbGwgYSBmcm9udGllciBvZiB1bnNvbHZlZCBpc3N1ZXMgdGhhdCBwaW9uZWVyaW5nIGRlc2lnbmVycyBuZWVkIHRvXG4gICAgICAgICAgICAgICAgZXhwbG9yZVxuICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAgICA8TGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgV2hhdCB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcGlvbmVlcnMsIHNldHRsZXJzLCBhbmQgdG93biBwbGFubmVycyBhcmUsIHdoZW4gaXRcbiAgICAgICAgICAgICAgICBjb21lcyB0byBkZXNpZ24gY3JhZnRcbiAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDwvTGlzdFdyYXBwZXI+XG4gICAgICAgICAgPC9EZXRhaWxXcmFwcGVyPlxuICAgICAgICA8L1NwZWFrZXJXcmFwcGVyPlxuICAgICAgICA8Q2hhbmdlUGFnZVNlY3Rpb24+XG4gICAgICAgICAgPENoYW5nZVBhZ2VUaXRsZT5XYW50IHRvIGtub3cgbW9yZS4uLiA/PC9DaGFuZ2VQYWdlVGl0bGU+XG4gICAgICAgICAgPE5hbWVJbWFnZVdyYXBwZXI+XG4gICAgICAgICAgICA8SW1hZ2VXcmFwcGVyPlxuICAgICAgICAgICAgICA8TmFtZUltYWdlTGVmdCBzcmM9XCJpbWFnZXMvc3BlYWtlcnMvc3BrX0xpYW1IdXRjaGluc29uQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgICAgIDxOYW1lVGV4dExlZnQ+IExJQU0gSFVUQ0hJTlNPTiA8L05hbWVUZXh0TGVmdD5cbiAgICAgICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgICAgICAgPEltYWdlV3JhcHBlcj5cbiAgICAgICAgICAgICAgPE5hbWVJbWFnZVJpZ2h0IHNyYz1cImltYWdlcy9zcGVha2Vycy9zcGtfRGFuYUNoaXNuZWxsQDN4LnBuZ1wiIC8+XG4gICAgICAgICAgICAgIDxOYW1lVGV4dFJpZ2h0PiBEQU5BIENISVNORUxMIDwvTmFtZVRleHRSaWdodD5cbiAgICAgICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgICAgIDwvTmFtZUltYWdlV3JhcHBlcj5cbiAgICAgICAgPC9DaGFuZ2VQYWdlU2VjdGlvbj5cbiAgICAgIDwvU3BlYWtlclNlY3Rpb24+XG4gICAgPC9QYWdlPlxuICAgIDxGb290IC8+XG4gIDwvTGF5b3V0PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBTcGVha2VyXG4iXX0= */"),p=Object(A.b)("img",{label:"NameImageLeft",target:"erp26vn20"})("width:640px;height:365px;margin-right:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),D=Object(A.b)("img",{label:"NameImageRight",target:"erp26vn21"})("width:640px;height:365px;margin-left:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=Object(A.b)("div",{label:"ImageWrapper",target:"erp26vn22"})("width:640px;height:365px;position:relative;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");I.default=function(){return G.a.createElement(c.a,null,G.a.createElement(X,null,G.a.createElement(d,null,G.a.createElement(B,null,G.a.createElement(W,{src:"images/speakers/spk_JaredSpool@3x.png"}),G.a.createElement(V,null,G.a.createElement(u,null,"JARED"),G.a.createElement(m,null,"SPOOL"),G.a.createElement(i,null,"is a Maker of Awesomeness at Center Centre/UIE and one of the leading experts in user experience."),G.a.createElement(a,null,"23 February 2018, 9:00 - 10:30"),G.a.createElement(Y,null,"“The Evolution of a New UX Design Resolution”"),G.a.createElement(x,null,"Design works on many levels. We can zoom in to the screen level, looking directly at what in the interactions on a single screen or page. We can zoom out a little to look at an entire application’s design, understanding how screens work together. Or we can pull back to an organization level, working to connect applications and other services together.",G.a.createElement("br",null),G.a.createElement("br",null),"Looking at design through different levels of resolution helps us answer some important questions. Is there a difference between UX and UI, and if so, how does that change how teams should operate? What is the relationship between product design and service design? How do we start preparing for what comes next?",G.a.createElement("br",null),G.a.createElement("br",null),"In this entertaining talk, Jared explores the relationships between these new levels of resolution. He’ll introduce you to a level of design beyond the organization level and you how we’ll need to start designing beyond organizational boundaries, and what that implies. He’ll introduce you to the pioneers of this new design area, and explain the process by which designers everywhere will need to develop their expertise."),G.a.createElement(R,null,"Jared will show you:"),G.a.createElement(h,null,G.a.createElement(H,null,"Where designers fall into the dangerous trap of thinking too narrowly about their career"),G.a.createElement(H,null,"How there’s still a frontier of unsolved issues that pioneering designers need to explore"),G.a.createElement(H,null,"What the relationship between pioneers, settlers, and town planners are, when it comes to design craft")))),G.a.createElement(y,null,G.a.createElement(n,null,"Want to know more... ?"),G.a.createElement(N,null,G.a.createElement(w,null,G.a.createElement(p,{src:"images/speakers/spk_LiamHutchinson@3x.png"}),G.a.createElement(v,null," LIAM HUTCHINSON ")),G.a.createElement(w,null,G.a.createElement(D,{src:"images/speakers/spk_DanaChisnell@3x.png"}),G.a.createElement(F,null," DANA CHISNELL ")))))),G.a.createElement(Z.a,null))}},151:function(g,I,b){"use strict";var C=b(7),G=b.n(C),A=b(0),l=b.n(A),c=b(147),Z=b(150),X=b(148),d=Object(c.b)("div",{label:"FootWrapper",target:"e10rpm8r0"})("background-color:#282828;padding:20px 40px;display:flex;flex-direction:row;justify-content:space-between;",X.b.s,"{flex-direction:column;align-items:center;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSzhCIiwiZmlsZSI6InNyYy9jb21wb25lbnRzL0Zvb3QuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbS9Qcm9qZWN0cy91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ2dhdHNieSdcbmltcG9ydCBtcSBmcm9tICcuLi8uLi91dGlscy9tZWRpYS1xdWVyeSdcblxuY29uc3QgRm9vdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjgyODI4O1xuICBwYWRkaW5nOiAyMHB4IDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgJHttcS5zfSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5gXG5cbmNvbnN0IEltYWdlTG9nbyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNvbnN0IFBvd2VyZWRCeSA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuYFxuXG5jb25zdCBMb2dvV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNsYXNzIEZvb3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBsb2dvVVJMV2l0aFByZWZpeCA9IG5hbWUgPT4gYC9pbWFnZXMvJHtuYW1lfWBcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGb290V3JhcHBlcj5cbiAgICAgICAgPExvZ29XcmFwcGVyPlxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPlxuICAgICAgICAgICAgPEltYWdlTG9nb1xuICAgICAgICAgICAgICBzcmM9e3RoaXMubG9nb1VSTFdpdGhQcmVmaXgoJ2xvZ29fVVhPLXdoaXRlLnN2ZycpfVxuICAgICAgICAgICAgICBhbHQ9XCJcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIDwvTG9nb1dyYXBwZXI+XG4gICAgICAgIDxQb3dlcmVkQnk+U2VydmUgYW5kIGluc3BpcmUgYnkgVVggVGhhaWxhbmQsIDIwMTg8L1Bvd2VyZWRCeT5cbiAgICAgIDwvRm9vdFdyYXBwZXI+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvb3RcbiJdfQ== */"),W=Object(c.b)("img",{label:"ImageLogo",target:"e10rpm8r1"})("height:55px;",X.b.l,"{height:32px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUI0QiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW0vUHJvamVjdHMvdXh0aCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAncmVhY3QtZW1vdGlvbidcbmltcG9ydCB7IExpbmsgfSBmcm9tICdnYXRzYnknXG5pbXBvcnQgbXEgZnJvbSAnLi4vLi4vdXRpbHMvbWVkaWEtcXVlcnknXG5cbmNvbnN0IEZvb3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4MjgyODtcbiAgcGFkZGluZzogMjBweCA0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICR7bXEuc30ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuYFxuXG5jb25zdCBJbWFnZUxvZ28gPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jb25zdCBQb3dlcmVkQnkgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbmBcblxuY29uc3QgTG9nb1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jbGFzcyBGb290IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgbG9nb1VSTFdpdGhQcmVmaXggPSBuYW1lID0+IGAvaW1hZ2VzLyR7bmFtZX1gXG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Rm9vdFdyYXBwZXI+XG4gICAgICAgIDxMb2dvV3JhcHBlcj5cbiAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgIDxJbWFnZUxvZ29cbiAgICAgICAgICAgICAgc3JjPXt0aGlzLmxvZ29VUkxXaXRoUHJlZml4KCdsb2dvX1VYTy13aGl0ZS5zdmcnKX1cbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L0xvZ29XcmFwcGVyPlxuICAgICAgICA8UG93ZXJlZEJ5PlNlcnZlIGFuZCBpbnNwaXJlIGJ5IFVYIFRoYWlsYW5kLCAyMDE4PC9Qb3dlcmVkQnk+XG4gICAgICA8L0Zvb3RXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb290XG4iXX0= */"),B=Object(c.b)("p",{label:"PoweredBy",target:"e10rpm8r2"})("font-size:14px;font-weight:300;color:var(--color_grey_super_light);align-self:center;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0IwQiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW0vUHJvamVjdHMvdXh0aCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAncmVhY3QtZW1vdGlvbidcbmltcG9ydCB7IExpbmsgfSBmcm9tICdnYXRzYnknXG5pbXBvcnQgbXEgZnJvbSAnLi4vLi4vdXRpbHMvbWVkaWEtcXVlcnknXG5cbmNvbnN0IEZvb3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4MjgyODtcbiAgcGFkZGluZzogMjBweCA0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICR7bXEuc30ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuYFxuXG5jb25zdCBJbWFnZUxvZ28gPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jb25zdCBQb3dlcmVkQnkgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbmBcblxuY29uc3QgTG9nb1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jbGFzcyBGb290IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgbG9nb1VSTFdpdGhQcmVmaXggPSBuYW1lID0+IGAvaW1hZ2VzLyR7bmFtZX1gXG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Rm9vdFdyYXBwZXI+XG4gICAgICAgIDxMb2dvV3JhcHBlcj5cbiAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgIDxJbWFnZUxvZ29cbiAgICAgICAgICAgICAgc3JjPXt0aGlzLmxvZ29VUkxXaXRoUHJlZml4KCdsb2dvX1VYTy13aGl0ZS5zdmcnKX1cbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L0xvZ29XcmFwcGVyPlxuICAgICAgICA8UG93ZXJlZEJ5PlNlcnZlIGFuZCBpbnNwaXJlIGJ5IFVYIFRoYWlsYW5kLCAyMDE4PC9Qb3dlcmVkQnk+XG4gICAgICA8L0Zvb3RXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb290XG4iXX0= */"),V=Object(c.b)("div",{label:"LogoWrapper",target:"e10rpm8r3"})("height:55px;",X.b.l,"{height:32px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0I4QiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW0vUHJvamVjdHMvdXh0aCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAncmVhY3QtZW1vdGlvbidcbmltcG9ydCB7IExpbmsgfSBmcm9tICdnYXRzYnknXG5pbXBvcnQgbXEgZnJvbSAnLi4vLi4vdXRpbHMvbWVkaWEtcXVlcnknXG5cbmNvbnN0IEZvb3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4MjgyODtcbiAgcGFkZGluZzogMjBweCA0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICR7bXEuc30ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuYFxuXG5jb25zdCBJbWFnZUxvZ28gPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jb25zdCBQb3dlcmVkQnkgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbmBcblxuY29uc3QgTG9nb1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jbGFzcyBGb290IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgbG9nb1VSTFdpdGhQcmVmaXggPSBuYW1lID0+IGAvaW1hZ2VzLyR7bmFtZX1gXG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Rm9vdFdyYXBwZXI+XG4gICAgICAgIDxMb2dvV3JhcHBlcj5cbiAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgIDxJbWFnZUxvZ29cbiAgICAgICAgICAgICAgc3JjPXt0aGlzLmxvZ29VUkxXaXRoUHJlZml4KCdsb2dvX1VYTy13aGl0ZS5zdmcnKX1cbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L0xvZ29XcmFwcGVyPlxuICAgICAgICA8UG93ZXJlZEJ5PlNlcnZlIGFuZCBpbnNwaXJlIGJ5IFVYIFRoYWlsYW5kLCAyMDE4PC9Qb3dlcmVkQnk+XG4gICAgICA8L0Zvb3RXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb290XG4iXX0= */"),u=function(g){function I(){for(var I,b=arguments.length,C=new Array(b),G=0;G<b;G++)C[G]=arguments[G];return(I=g.call.apply(g,[this].concat(C))||this).logoURLWithPrefix=function(g){return"/images/"+g},I}return G()(I,g),I.prototype.render=function(){return l.a.createElement(d,null,l.a.createElement(V,null,l.a.createElement(Z.Link,{to:"/"},l.a.createElement(W,{src:this.logoURLWithPrefix("logo_UXO-white.svg"),alt:""}))),l.a.createElement(B,null,"Serve and inspire by UX Thailand, 2018"))},I}(l.a.Component);I.a=u}}]);
//# sourceMappingURL=component---src-pages-speaker-js-bdb6626d278105b65757.js.map