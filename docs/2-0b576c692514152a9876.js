(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{156:function(g,I,C){"use strict";var A=C(0),b=C.n(A),G=C(155),c=C(157),l=C(161),X=C(160),Z=C(7),d=C.n(Z),W=function(g){function I(){for(var I,C=arguments.length,A=new Array(C),b=0;b<C;b++)A[b]=arguments[b];return(I=g.call.apply(g,[this].concat(A))||this).state={id:"talk"},I.changeTab=function(g){I.setState({id:g})},I}d()(I,g);var C=I.prototype;return C.componentDidMount=function(){var g=this.props.contents;g.talk?this.changeTab("talk"):g.workshop?this.changeTab("workshop"):this.changeTab("biography")},C.render=function(){return(0,this.props.children)({currentTab:this.state.id,changeTab:this.changeTab})},I}(b.a.Component);C.d(I,"e",function(){return t}),C.d(I,"b",function(){return H}),C.d(I,"a",function(){return D}),C.d(I,"d",function(){return R}),C.d(I,"c",function(){return n});var B=Object(G.b)("div",{label:"Page",target:"eeul0jz0"})("background-image:linear-gradient(#000,var(--color_blur_dark));padding-top:200px;padding-bottom:100px;",c.b.s,"{padding-top:160px;padding-bottom:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),i=Object(G.b)("section",{label:"SpeakerSection",target:"eeul0jz1"})("max-width:var(--layout_width_size_large);margin:0 auto;padding:0 var(--padding_size);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),u=Object(G.b)("img",{label:"Image",target:"eeul0jz2"})("width:100%;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),x=Object(G.b)("div",{label:"SpeakerWrapper",target:"eeul0jz3"})("display:grid;grid-template-columns:repeat(2,1fr);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),m=Object(G.b)("div",{label:"DetailWrapper",target:"eeul0jz4"})("display:flex;flex-direction:column;position:relative;padding-left:65px;",c.b.s,"{padding-left:0px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),a=Object(G.b)("h1",{label:"FirstNameTitle",target:"eeul0jz5"})("font-size:100px;font-weight:900;font-style:italic;line-height:1.1;color:var(--color_blue);",c.b.s,"{font-size:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Y=Object(G.b)(a,{label:"LastNameTitle",target:"eeul0jz6"})("padding-left:25px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),V=Object(G.b)("h2",{label:"Subtitle",target:"eeul0jz7"})("font-size:24px;font-weight:200;font-style:italic;color:var(--color_grey_super_light);width:570px;margin-top:20px;",c.b.s,"{margin-top:5px;font-size:16px;width:100%;word-wrap:break-word;font-weight:300;font-style:normal;bold{font-weight:600;}}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=Object(G.b)("h1",{label:"Topic",target:"eeul0jz8"})("font-size:36px;font-weight:200;font-style:italic;color:var(--color_blue);line-height:1.2;margin-bottom:40px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL1NwZWFrZXJQYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThFOEIiLCJmaWxlIjoic3JjL2NvbXBvbmVudHMvU3BlYWtlclBhZ2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbS9Qcm9qZWN0cy91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IG1xIGZyb20gJy4uLy4uL3V0aWxzL21lZGlhLXF1ZXJ5J1xuXG5pbXBvcnQgTGF5b3V0IGZyb20gJy4vbGF5b3V0J1xuaW1wb3J0IEZvb3QgZnJvbSAnLi9Gb290J1xuaW1wb3J0IFRhYnMgZnJvbSAnLi9UYWJzJ1xuXG5jb25zdCBQYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCMwMDAsIHZhcigtLWNvbG9yX2JsdXJfZGFyaykpO1xuXG4gIHBhZGRpbmctdG9wOiAyMDBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xuICAke21xLnN9IHtcbiAgICBwYWRkaW5nLXRvcDogMTYwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gIH1cbmBcblxuY29uc3QgU3BlYWtlclNlY3Rpb24gPSBzdHlsZWQuc2VjdGlvbmBcbiAgbWF4LXdpZHRoOiB2YXIoLS1sYXlvdXRfd2lkdGhfc2l6ZV9sYXJnZSk7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmdfc2l6ZSk7XG5gXG5cbmNvbnN0IEltYWdlID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDEwMCU7XG5gXG5cbmNvbnN0IFNwZWFrZXJXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcbmBcblxuY29uc3QgRGV0YWlsV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1sZWZ0OiA2NXB4O1xuICAke21xLnN9IHtcbiAgICBwYWRkaW5nLWxlZnQ6IDBweDtcbiAgfVxuYFxuXG5jb25zdCBGaXJzdE5hbWVUaXRsZSA9IHN0eWxlZC5oMWBcbiAgZm9udC1zaXplOiAxMDBweDtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBsaW5lLWhlaWdodDogMS4xO1xuICBjb2xvcjogdmFyKC0tY29sb3JfYmx1ZSk7XG4gICR7bXEuc30ge1xuICAgIGZvbnQtc2l6ZTogNDBweDtcbiAgfVxuYFxuY29uc3QgTGFzdE5hbWVUaXRsZSA9IHN0eWxlZChGaXJzdE5hbWVUaXRsZSlgXG4gIHBhZGRpbmctbGVmdDogMjVweDtcbmBcblxuY29uc3QgU3VidGl0bGUgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIHdpZHRoOiA1NzBweDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgJHttcS5zfSB7XG4gICAgbWFyZ2luLXRvcDogNXB4O1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgYm9sZCB7XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgIH1cbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgVG9waWMgPSBzdHlsZWQuaDFgXG4gIGZvbnQtc2l6ZTogMzZweDtcbiAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfYmx1ZSk7XG4gIGxpbmUtaGVpZ2h0OiAxLjI7XG4gIG1hcmdpbi1ib3R0b206IDQwcHg7XG5gXG5cbmV4cG9ydCBjb25zdCBDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5gXG5cbmV4cG9ydCBjb25zdCBCbHVlQ29udGVudCA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ibHVlKTtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbmBcblxuZXhwb3J0IGNvbnN0IExpc3RXcmFwcGVyID0gc3R5bGVkLnVsYFxuICBsaXN0LXN0eWxlOiBjaXJjbGUgb3V0c2lkZSBub25lO1xuICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG5gXG5cbmV4cG9ydCBjb25zdCBMaXN0SXRlbSA9IHN0eWxlZC5saWBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgbGluZS1oZWlnaHQ6IDI7XG5gXG5cbmNvbnN0IE5hbWVUZXh0ID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDMzNXB4O1xuICBmb250LXNpemU6IDQ4cHg7XG4gIGZvbnQtd2VpZ2h0OiA5MDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdXJfZGFyayk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgdGV4dC1zaGFkb3c6IDAgNHB4IDRweCByZ2JhKDE1LCAyOSwgNzksIDAuMjUpO1xuICAke21xLnN9IHtcbiAgICBmb250LXNpemU6IDMycHg7XG4gICAgd2lkdGg6IDE1MHB4O1xuICB9XG5gXG5cbmNvbnN0IE5hbWVUZXh0TGVmdCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgbGVmdDogMjBweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmBcblxuY29uc3QgTmFtZVRleHRSaWdodCA9IHN0eWxlZChOYW1lVGV4dClgXG4gIGJvdHRvbTogMjBweDtcbiAgcmlnaHQ6IDIwcHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuYFxuXG5jb25zdCBOYW1lSW1hZ2VMZWZ0ID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gICR7bXEuc30ge1xuICAgIHdpZHRoOiAyODBweDtcbiAgICBoZWlnaHQ6IDE2MHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gIH1cbmBcblxuY29uc3QgTmFtZUltYWdlUmlnaHQgPSBzdHlsZWQuaW1nYFxuICB3aWR0aDogNjQwcHg7XG4gIGhlaWdodDogMzY1cHg7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICAke21xLnN9IHtcbiAgICB3aWR0aDogMjgwcHg7XG4gICAgaGVpZ2h0OiAxNjBweDtcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gIH1cbmBcblxuY29uc3QgSW1hZ2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDY0MHB4O1xuICBoZWlnaHQ6IDM2NXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICR7bXEuc30ge1xuICAgIHdpZHRoOiAyODBweDtcbiAgICBoZWlnaHQ6IDE2MHB4O1xuICB9XG5gXG5cbmNvbnN0IE1vYmlsZUZ1bGxOYW1lV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICR7bXEuc30ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuYFxuXG5jb25zdCBTbWFsbCA9IHN0eWxlZC5kaXZgXG4gIEBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgJHttcS5zfSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICB9XG5gXG5cbmNvbnN0IExhcmdlID0gc3R5bGVkLmRpdmBcbiAgJHttcS5sfSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuICAke21xLnN9IHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gXG5cbmNvbnN0IFRhYlRleHQgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC1zaXplOiAyMHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIHRleHQtc2hhZG93OiAwIDRweCA0cHggcmdiYSgxNSwgMjksIDc5LCAwLjI1KTtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2FsbW9zdF93aGl0ZSk7XG5gXG5jb25zdCBMaXN0Um93ID0gc3R5bGVkLnVsYFxuICBkaXNwbGF5OiBmbGV4O1xuICBwYWRkaW5nOiAyMi41cHggMDtcbmBcbmNvbnN0IExpc3QgPSBzdHlsZWQubGlgXG4gIG1hcmdpbjogMCAxNnB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5hY3RpdmUgJiZcbiAgICBgXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7XG4gIGB9O1xuYFxuZnVuY3Rpb24gVGFiVGl0bGVzKHsgb25DbGljaywgY3VycmVudFRhYiB9KSB7XG4gIHJldHVybiA8PjwvPlxufVxuXG5jb25zdCBTcGVha2VyUGFnZSA9ICh7IGhlYWRlciwgaW1hZ2VQYXRoLCBjb250ZW50cyB9KSA9PiAoXG4gIDxMYXlvdXQ+XG4gICAgPFBhZ2U+XG4gICAgICA8U3BlYWtlclNlY3Rpb24+XG4gICAgICAgIDxTcGVha2VyV3JhcHBlcj5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPXtpbWFnZVBhdGh9IC8+XG4gICAgICAgICAgPERldGFpbFdyYXBwZXI+XG4gICAgICAgICAgICA8TGFyZ2U+XG4gICAgICAgICAgICAgIDxNb2JpbGVGdWxsTmFtZVdyYXBwZXI+XG4gICAgICAgICAgICAgICAgPEZpcnN0TmFtZVRpdGxlPntoZWFkZXIuZmlyc3ROYW1lfTwvRmlyc3ROYW1lVGl0bGU+XG4gICAgICAgICAgICAgICAgPExhc3ROYW1lVGl0bGU+e2hlYWRlci5sYXN0TmFtZX08L0xhc3ROYW1lVGl0bGU+XG4gICAgICAgICAgICAgIDwvTW9iaWxlRnVsbE5hbWVXcmFwcGVyPlxuICAgICAgICAgICAgICA8U3VidGl0bGU+e2hlYWRlci5zdWJ0aXRsZX08L1N1YnRpdGxlPlxuICAgICAgICAgICAgPC9MYXJnZT5cbiAgICAgICAgICAgIDxUYWJzIGNvbnRlbnRzPXtjb250ZW50c30+XG4gICAgICAgICAgICAgIHsoeyBjdXJyZW50VGFiLCBjaGFuZ2VUYWIgfSkgPT4gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8TGlzdFJvdz5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRlbnRzLnRhbGsgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxMaXN0IGFjdGl2ZT17Y3VycmVudFRhYiA9PT0gJ3RhbGsnfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJUZXh0IG9uQ2xpY2s9eygpID0+IGNoYW5nZVRhYigndGFsaycpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgVGFsa1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJUZXh0PlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdD5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgLFxuICAgICAgICAgICAgICAgICAgICB7Y29udGVudHMud29ya3Nob3AgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxMaXN0IGFjdGl2ZT17Y3VycmVudFRhYiA9PT0gJ3dvcmtzaG9wJ30+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFiVGV4dCBvbkNsaWNrPXsoKSA9PiBjaGFuZ2VUYWIoJ3dvcmtzaG9wJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICBXb3Jrc2hvcFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJUZXh0PlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdD5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPExpc3QgYWN0aXZlPXtjdXJyZW50VGFiID09PSAnYmlvZ3JhcGh5J30+XG4gICAgICAgICAgICAgICAgICAgICAgPFRhYlRleHQgb25DbGljaz17KCkgPT4gY2hhbmdlVGFiKCdiaW9ncmFwaHknKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICBCaW9ncmFwaHlcbiAgICAgICAgICAgICAgICAgICAgICA8L1RhYlRleHQ+XG4gICAgICAgICAgICAgICAgICAgIDwvTGlzdD5cbiAgICAgICAgICAgICAgICAgIDwvTGlzdFJvdz5cbiAgICAgICAgICAgICAgICAgIHtjb250ZW50c1tjdXJyZW50VGFiXX1cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvVGFicz5cbiAgICAgICAgICA8L0RldGFpbFdyYXBwZXI+XG4gICAgICAgIDwvU3BlYWtlcldyYXBwZXI+XG4gICAgICA8L1NwZWFrZXJTZWN0aW9uPlxuICAgIDwvUGFnZT5cbiAgICA8Rm9vdCAvPlxuICA8L0xheW91dD5cbilcblxuZXhwb3J0IGRlZmF1bHQgU3BlYWtlclBhZ2VcbiJdfQ== */"),H=Object(G.b)("p",{label:"Content",target:"eeul0jz9"})("font-size:14px;font-weight:300;font-style:italic;color:var(--color_grey_super_light);margin-bottom:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),D=Object(G.b)("p",{label:"BlueContent",target:"eeul0jz10"})("font-size:16px;font-weight:300;color:var(--color_blue);margin-bottom:10px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),R=Object(G.b)("ul",{label:"ListWrapper",target:"eeul0jz11"})("list-style:circle outside none;padding-left:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=Object(G.b)("li",{label:"ListItem",target:"eeul0jz12"})("font-size:14px;font-weight:normal;font-style:italic;color:var(--color_grey_super_light);line-height:2;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=(c.b.s,c.b.s,c.b.s,c.b.s,Object(G.b)("div",{label:"MobileFullNameWrapper",target:"eeul0jz19"})(c.b.s,"{position:relative;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),h=(c.b.s,Object(G.b)("div",{label:"Large",target:"eeul0jz21"})(c.b.l,"{display:flex;}",c.b.s,"{display:none;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),N=Object(G.b)("span",{label:"TabText",target:"eeul0jz22"})("font-size:20px;font-weight:300;font-style:italic;text-shadow:0 4px 4px rgba(15,29,79,0.25);color:var(--color_almost_white);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),J=Object(G.b)("ul",{label:"ListRow",target:"eeul0jz23"})("display:flex;padding:22.5px 0;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),F=Object(G.b)("li",{label:"List",target:"eeul0jz24"})("margin:0 16px;cursor:pointer;",function(g){return g.active&&"\n    border-bottom: 1px solid #fff;\n  "},";/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");I.f=function(g){var I=g.header,C=g.imagePath,A=g.contents;return b.a.createElement(l.a,null,b.a.createElement(B,null,b.a.createElement(i,null,b.a.createElement(x,null,b.a.createElement(u,{src:C}),b.a.createElement(m,null,b.a.createElement(h,null,b.a.createElement(w,null,b.a.createElement(a,null,I.firstName),b.a.createElement(Y,null,I.lastName)),b.a.createElement(V,null,I.subtitle)),b.a.createElement(W,{contents:A},function(g){var I=g.currentTab,C=g.changeTab;return b.a.createElement(b.a.Fragment,null,b.a.createElement(J,null,A.talk&&b.a.createElement(F,{active:"talk"===I},b.a.createElement(N,{onClick:function(){return C("talk")}},"Talk")),",",A.workshop&&b.a.createElement(F,{active:"workshop"===I},b.a.createElement(N,{onClick:function(){return C("workshop")}},"Workshop")),b.a.createElement(F,{active:"biography"===I},b.a.createElement(N,{onClick:function(){return C("biography")}},"Biography"))),A[I])}))))),b.a.createElement(X.a,null))}},160:function(g,I,C){"use strict";var A=C(7),b=C.n(A),G=C(0),c=C.n(G),l=C(155),X=C(159),Z=C(157),d=Object(l.b)("div",{label:"FootWrapper",target:"e10rpm8r0"})("background-color:#282828;padding:20px 40px;display:flex;flex-direction:row;justify-content:space-between;",Z.b.s,"{flex-direction:column;align-items:center;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSzhCIiwiZmlsZSI6InNyYy9jb21wb25lbnRzL0Zvb3QuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbS9Qcm9qZWN0cy91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ2dhdHNieSdcbmltcG9ydCBtcSBmcm9tICcuLi8uLi91dGlscy9tZWRpYS1xdWVyeSdcblxuY29uc3QgRm9vdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjgyODI4O1xuICBwYWRkaW5nOiAyMHB4IDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgJHttcS5zfSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5gXG5cbmNvbnN0IEltYWdlTG9nbyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNvbnN0IFBvd2VyZWRCeSA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAke21xLnN9IHtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICB9XG5gXG5cbmNvbnN0IExvZ29XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiA1NXB4O1xuICAke21xLmx9IHtcbiAgICBoZWlnaHQ6IDMycHg7XG4gIH1cbmBcblxuY2xhc3MgRm9vdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGxvZ29VUkxXaXRoUHJlZml4ID0gbmFtZSA9PiBgL2ltYWdlcy8ke25hbWV9YFxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZvb3RXcmFwcGVyPlxuICAgICAgICA8TG9nb1dyYXBwZXI+XG4gICAgICAgICAgPExpbmsgdG89XCIvXCI+XG4gICAgICAgICAgICA8SW1hZ2VMb2dvXG4gICAgICAgICAgICAgIHNyYz17dGhpcy5sb2dvVVJMV2l0aFByZWZpeCgnbG9nb19VWE8td2hpdGUuc3ZnJyl9XG4gICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgPC9Mb2dvV3JhcHBlcj5cbiAgICAgICAgPFBvd2VyZWRCeT5TZXJ2ZSBhbmQgaW5zcGlyZSBieSBVWCBUaGFpbGFuZCwgMjAxODwvUG93ZXJlZEJ5PlxuICAgICAgPC9Gb290V3JhcHBlcj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9vdFxuIl19 */"),W=Object(l.b)("img",{label:"ImageLogo",target:"e10rpm8r1"})("height:55px;",Z.b.l,"{height:32px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUI0QiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW0vUHJvamVjdHMvdXh0aCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAncmVhY3QtZW1vdGlvbidcbmltcG9ydCB7IExpbmsgfSBmcm9tICdnYXRzYnknXG5pbXBvcnQgbXEgZnJvbSAnLi4vLi4vdXRpbHMvbWVkaWEtcXVlcnknXG5cbmNvbnN0IEZvb3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4MjgyODtcbiAgcGFkZGluZzogMjBweCA0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICR7bXEuc30ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuYFxuXG5jb25zdCBJbWFnZUxvZ28gPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jb25zdCBQb3dlcmVkQnkgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgJHttcS5zfSB7XG4gICAgbWFyZ2luLXRvcDogMjBweDtcbiAgfVxuYFxuXG5jb25zdCBMb2dvV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNsYXNzIEZvb3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBsb2dvVVJMV2l0aFByZWZpeCA9IG5hbWUgPT4gYC9pbWFnZXMvJHtuYW1lfWBcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGb290V3JhcHBlcj5cbiAgICAgICAgPExvZ29XcmFwcGVyPlxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPlxuICAgICAgICAgICAgPEltYWdlTG9nb1xuICAgICAgICAgICAgICBzcmM9e3RoaXMubG9nb1VSTFdpdGhQcmVmaXgoJ2xvZ29fVVhPLXdoaXRlLnN2ZycpfVxuICAgICAgICAgICAgICBhbHQ9XCJcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIDwvTG9nb1dyYXBwZXI+XG4gICAgICAgIDxQb3dlcmVkQnk+U2VydmUgYW5kIGluc3BpcmUgYnkgVVggVGhhaWxhbmQsIDIwMTg8L1Bvd2VyZWRCeT5cbiAgICAgIDwvRm9vdFdyYXBwZXI+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvb3RcbiJdfQ== */"),B=Object(l.b)("p",{label:"PoweredBy",target:"e10rpm8r2"})("font-size:14px;font-weight:300;color:var(--color_grey_super_light);align-self:center;",Z.b.s,"{margin-top:20px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0IwQiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW0vUHJvamVjdHMvdXh0aCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAncmVhY3QtZW1vdGlvbidcbmltcG9ydCB7IExpbmsgfSBmcm9tICdnYXRzYnknXG5pbXBvcnQgbXEgZnJvbSAnLi4vLi4vdXRpbHMvbWVkaWEtcXVlcnknXG5cbmNvbnN0IEZvb3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4MjgyODtcbiAgcGFkZGluZzogMjBweCA0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICR7bXEuc30ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuYFxuXG5jb25zdCBJbWFnZUxvZ28gPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jb25zdCBQb3dlcmVkQnkgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgJHttcS5zfSB7XG4gICAgbWFyZ2luLXRvcDogMjBweDtcbiAgfVxuYFxuXG5jb25zdCBMb2dvV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNsYXNzIEZvb3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBsb2dvVVJMV2l0aFByZWZpeCA9IG5hbWUgPT4gYC9pbWFnZXMvJHtuYW1lfWBcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGb290V3JhcHBlcj5cbiAgICAgICAgPExvZ29XcmFwcGVyPlxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPlxuICAgICAgICAgICAgPEltYWdlTG9nb1xuICAgICAgICAgICAgICBzcmM9e3RoaXMubG9nb1VSTFdpdGhQcmVmaXgoJ2xvZ29fVVhPLXdoaXRlLnN2ZycpfVxuICAgICAgICAgICAgICBhbHQ9XCJcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIDwvTG9nb1dyYXBwZXI+XG4gICAgICAgIDxQb3dlcmVkQnk+U2VydmUgYW5kIGluc3BpcmUgYnkgVVggVGhhaWxhbmQsIDIwMTg8L1Bvd2VyZWRCeT5cbiAgICAgIDwvRm9vdFdyYXBwZXI+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvb3RcbiJdfQ== */"),i=Object(l.b)("div",{label:"LogoWrapper",target:"e10rpm8r3"})("height:55px;",Z.b.l,"{height:32px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0M4QiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW0vUHJvamVjdHMvdXh0aCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAncmVhY3QtZW1vdGlvbidcbmltcG9ydCB7IExpbmsgfSBmcm9tICdnYXRzYnknXG5pbXBvcnQgbXEgZnJvbSAnLi4vLi4vdXRpbHMvbWVkaWEtcXVlcnknXG5cbmNvbnN0IEZvb3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4MjgyODtcbiAgcGFkZGluZzogMjBweCA0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICR7bXEuc30ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuYFxuXG5jb25zdCBJbWFnZUxvZ28gPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jb25zdCBQb3dlcmVkQnkgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBjb2xvcjogdmFyKC0tY29sb3JfZ3JleV9zdXBlcl9saWdodCk7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgJHttcS5zfSB7XG4gICAgbWFyZ2luLXRvcDogMjBweDtcbiAgfVxuYFxuXG5jb25zdCBMb2dvV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNsYXNzIEZvb3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBsb2dvVVJMV2l0aFByZWZpeCA9IG5hbWUgPT4gYC9pbWFnZXMvJHtuYW1lfWBcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGb290V3JhcHBlcj5cbiAgICAgICAgPExvZ29XcmFwcGVyPlxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPlxuICAgICAgICAgICAgPEltYWdlTG9nb1xuICAgICAgICAgICAgICBzcmM9e3RoaXMubG9nb1VSTFdpdGhQcmVmaXgoJ2xvZ29fVVhPLXdoaXRlLnN2ZycpfVxuICAgICAgICAgICAgICBhbHQ9XCJcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIDwvTG9nb1dyYXBwZXI+XG4gICAgICAgIDxQb3dlcmVkQnk+U2VydmUgYW5kIGluc3BpcmUgYnkgVVggVGhhaWxhbmQsIDIwMTg8L1Bvd2VyZWRCeT5cbiAgICAgIDwvRm9vdFdyYXBwZXI+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvb3RcbiJdfQ== */"),u=function(g){function I(){for(var I,C=arguments.length,A=new Array(C),b=0;b<C;b++)A[b]=arguments[b];return(I=g.call.apply(g,[this].concat(A))||this).logoURLWithPrefix=function(g){return"/images/"+g},I}return b()(I,g),I.prototype.render=function(){return c.a.createElement(d,null,c.a.createElement(i,null,c.a.createElement(X.Link,{to:"/"},c.a.createElement(W,{src:this.logoURLWithPrefix("logo_UXO-white.svg"),alt:""}))),c.a.createElement(B,null,"Serve and inspire by UX Thailand, 2018"))},I}(c.a.Component);I.a=u}}]);
//# sourceMappingURL=2-0b576c692514152a9876.js.map