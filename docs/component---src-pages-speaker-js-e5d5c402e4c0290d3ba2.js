(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{144:function(g,I,C){"use strict";C.r(I);var A=C(0),b=C.n(A),G=C(147),c=C(148),l=C(152),Z=C(151),X=Object(G.b)("div",{label:"Page",target:"erp26vn0"})("background-image:linear-gradient(#000,var(--color_blur_dark));padding-top:200px;padding-bottom:100px;",c.b.s,"{padding-top:160px;padding-bottom:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),d=Object(G.b)("section",{label:"SpeakerSection",target:"erp26vn1"})("max-width:var(--layout_width_size_large);margin:0 auto;padding:0 var(--padding_size);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),W=Object(G.b)("img",{label:"Image",target:"erp26vn2"})("width:610px;height:610px;",c.b.s,"{width:280px;height:280px;margin-top:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),B=Object(G.b)("div",{label:"SpeakerWrapper",target:"erp26vn3"})("display:flex;flex-direction:row;",c.b.s,"{flex-direction:column;align-items:center}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),u=Object(G.b)("div",{label:"DetailWrapper",target:"erp26vn4"})("display:flex;flex-direction:column;position:relative;padding-left:65px;",c.b.s,"{padding-left:0px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),x=Object(G.b)("h1",{label:"FirstNameTitle",target:"erp26vn5"})("font-size:100px;font-weight:900;font-style:italic;line-height:1.1;color:var(--color_blue);",c.b.s,"{font-size:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),V=Object(G.b)(x,{label:"LastNameTitle",target:"erp26vn6"})("padding-left:25px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),m=Object(G.b)("h2",{label:"Subtitle",target:"erp26vn7"})("font-size:24px;font-weight:200;font-style:italic;color:var(--color_grey_super_light);width:570px;margin-top:20px;",c.b.s,"{margin-top:5px;font-size:16px;width:100%;word-wrap:break-word;font-weight:300;font-style:normal;bold{font-weight:600;}}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),i=Object(G.b)("p",{label:"DateTime",target:"erp26vn8"})("font-size:14px;font-weight:normal;font-style:italic;color:rgba(232,232,232,0.6);margin-top:40px;margin-bottom:10px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),a=Object(G.b)("h1",{label:"Topic",target:"erp26vn9"})("font-size:36px;font-weight:200;font-style:italic;color:var(--color_blue);line-height:1.2;margin-bottom:40px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),H=Object(G.b)("p",{label:"Content",target:"erp26vn10"})("font-size:14px;font-weight:300;font-style:italic;color:var(--color_grey_super_light);margin-bottom:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Y=Object(G.b)("p",{label:"BlueContent",target:"erp26vn11"})("font-size:16px;font-weight:300;color:var(--color_blue);margin-bottom:10px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=Object(G.b)("ul",{label:"ListWrapper",target:"erp26vn12"})("list-style:circle outside none;padding-left:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),R=Object(G.b)("li",{label:"ListItem",target:"erp26vn13"})("font-size:14px;font-weight:normal;font-style:italic;color:var(--color_grey_super_light);line-height:2;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=Object(G.b)("section",{label:"ChangePageSection",target:"erp26vn14"})("padding-top:100px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),h=Object(G.b)("h2",{label:"ChangePageTitle",target:"erp26vn15"})("font-size:36px;font-weight:200;font-style:italic;color:var(--color_blue);text-align:center;",c.b.s,"{font-size:32px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),v=Object(G.b)("div",{label:"NameImageWrapper",target:"erp26vn16"})("display:flex;flex-direction:row;justify-content:center;margin-top:40px;",c.b.s,"{flex-direction:column;align-items:center;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),N=Object(G.b)("div",{label:"NameText",target:"erp26vn17"})("width:335px;font-size:48px;font-weight:900;font-style:italic;color:var(--color_blur_dark);position:absolute;line-height:1.1;text-shadow:0 4px 4px rgba(15,29,79,0.25);",c.b.s,"{font-size:32px;width:150px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),p=Object(G.b)(N,{label:"NameTextLeft",target:"erp26vn18"})("bottom:20px;left:20px;text-align:left;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),D=Object(G.b)(N,{label:"NameTextRight",target:"erp26vn19"})("bottom:20px;right:20px;text-align:right;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),F=Object(G.b)("img",{label:"NameImageLeft",target:"erp26vn20"})("width:640px;height:365px;margin-right:20px;",c.b.s,"{width:280px;height:160px;margin-left:0px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),y=Object(G.b)("img",{label:"NameImageRight",target:"erp26vn21"})("width:640px;height:365px;margin-left:20px;",c.b.s,"{width:280px;height:160px;margin-left:0px;margin-top:20px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),z=Object(G.b)("div",{label:"ImageWrapper",target:"erp26vn22"})("width:640px;height:365px;position:relative;",c.b.s,"{width:280px;height:160px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=Object(G.b)("div",{label:"MobileFullNameWrapper",target:"erp26vn23"})(c.b.s,"{position:relative;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),o=Object(G.b)("div",{label:"Small",target:"erp26vn24"})("@media (min-width:992px){display:none;}",c.b.s,"{display:flex;flex-direction:column;align-items:flex-start;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),e=Object(G.b)("div",{label:"Large",target:"erp26vn25"})(c.b.l,"{display:flex;}",c.b.s,"{display:none;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),O=function(){return b.a.createElement(b.a.Fragment,null,b.a.createElement(w,null,b.a.createElement(x,null,"JARED"),b.a.createElement(V,null,"SPOOL")),b.a.createElement(m,null,"is a ",b.a.createElement("bold",null," Maker of Awesomeness at Center Centre/UIE ")," and one of the leading experts in user experience."))};I.default=function(){return b.a.createElement(l.a,null,b.a.createElement(X,null,b.a.createElement(d,null,b.a.createElement(B,null,b.a.createElement(o,null,b.a.createElement(O,null)),b.a.createElement(W,{src:"images/speakers/spk_JaredSpool@3x.png"}),b.a.createElement(u,null,b.a.createElement(e,null,b.a.createElement(O,null)),b.a.createElement(i,null,"23 February 2018, 9:00 - 10:30"),b.a.createElement(a,null,"“The Evolution of a New UX Design Resolution”"),b.a.createElement(H,null,"Design works on many levels. We can zoom in to the screen level, looking directly at what in the interactions on a single screen or page. We can zoom out a little to look at an entire application’s design, understanding how screens work together. Or we can pull back to an organization level, working to connect applications and other services together.",b.a.createElement("br",null),b.a.createElement("br",null),"Looking at design through different levels of resolution helps us answer some important questions. Is there a difference between UX and UI, and if so, how does that change how teams should operate? What is the relationship between product design and service design? How do we start preparing for what comes next?",b.a.createElement("br",null),b.a.createElement("br",null),"In this entertaining talk, Jared explores the relationships between these new levels of resolution. He’ll introduce you to a level of design beyond the organization level and you how we’ll need to start designing beyond organizational boundaries, and what that implies. He’ll introduce you to the pioneers of this new design area, and explain the process by which designers everywhere will need to develop their expertise."),b.a.createElement(Y,null,"Jared will show you:"),b.a.createElement(t,null,b.a.createElement(R,null,"Where designers fall into the dangerous trap of thinking too narrowly about their career"),b.a.createElement(R,null,"How there’s still a frontier of unsolved issues that pioneering designers need to explore"),b.a.createElement(R,null,"What the relationship between pioneers, settlers, and town planners are, when it comes to design craft")))),b.a.createElement(n,null,b.a.createElement(h,null,"Want to know more... ?"),b.a.createElement(v,null,b.a.createElement(z,null,b.a.createElement(F,{src:"images/speakers/spk_LiamHutchinson@3x.png"}),b.a.createElement(p,null," LIAM HUTCHINSON ")),b.a.createElement(z,null,b.a.createElement(y,{src:"images/speakers/spk_DanaChisnell@3x.png"}),b.a.createElement(D,null," DANA CHISNELL ")))))),b.a.createElement(Z.a,null))}},151:function(g,I,C){"use strict";var A=C(7),b=C.n(A),G=C(0),c=C.n(G),l=C(147),Z=C(150),X=C(148),d=Object(l.b)("div",{label:"FootWrapper",target:"e10rpm8r0"})("background-color:#282828;padding:20px 40px;display:flex;flex-direction:row;justify-content:space-between;",X.b.s,"{flex-direction:column;align-items:center;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSzhCIiwiZmlsZSI6InNyYy9jb21wb25lbnRzL0Zvb3QuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3dhc2F3YXRzb21uby9EZXNrdG9wL2V4dHJhL3V4dGgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3JlYWN0LWVtb3Rpb24nXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAnZ2F0c2J5J1xuaW1wb3J0IG1xIGZyb20gJy4uLy4uL3V0aWxzL21lZGlhLXF1ZXJ5J1xuXG5jb25zdCBGb290V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtY29sb3I6ICMyODI4Mjg7XG4gIHBhZGRpbmc6IDIwcHggNDBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAke21xLnN9IHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbmBcblxuY29uc3QgSW1hZ2VMb2dvID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiA1NXB4O1xuICAke21xLmx9IHtcbiAgICBoZWlnaHQ6IDMycHg7XG4gIH1cbmBcblxuY29uc3QgUG93ZXJlZEJ5ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2dyZXlfc3VwZXJfbGlnaHQpO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICR7bXEuc30ge1xuICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gIH1cbmBcblxuY29uc3QgTG9nb1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDU1cHg7XG4gICR7bXEubH0ge1xuICAgIGhlaWdodDogMzJweDtcbiAgfVxuYFxuXG5jbGFzcyBGb290IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgbG9nb1VSTFdpdGhQcmVmaXggPSBuYW1lID0+IGAvaW1hZ2VzLyR7bmFtZX1gXG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Rm9vdFdyYXBwZXI+XG4gICAgICAgIDxMb2dvV3JhcHBlcj5cbiAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgIDxJbWFnZUxvZ29cbiAgICAgICAgICAgICAgc3JjPXt0aGlzLmxvZ29VUkxXaXRoUHJlZml4KCdsb2dvX1VYTy13aGl0ZS5zdmcnKX1cbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L0xvZ29XcmFwcGVyPlxuICAgICAgICA8UG93ZXJlZEJ5PlNlcnZlIGFuZCBpbnNwaXJlIGJ5IFVYIFRoYWlsYW5kLCAyMDE4PC9Qb3dlcmVkQnk+XG4gICAgICA8L0Zvb3RXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb290XG4iXX0= */"),W=Object(l.b)("img",{label:"ImageLogo",target:"e10rpm8r1"})("height:55px;",X.b.l,"{height:32px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUI0QiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy93YXNhd2F0c29tbm8vRGVza3RvcC9leHRyYS91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ2dhdHNieSdcbmltcG9ydCBtcSBmcm9tICcuLi8uLi91dGlscy9tZWRpYS1xdWVyeSdcblxuY29uc3QgRm9vdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjgyODI4O1xuICBwYWRkaW5nOiAyMHB4IDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgJHttcS5zfSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5gXG5cbmNvbnN0IEltYWdlTG9nbyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNvbnN0IFBvd2VyZWRCeSA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAke21xLnN9IHtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICB9XG5gXG5cbmNvbnN0IExvZ29XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiA1NXB4O1xuICAke21xLmx9IHtcbiAgICBoZWlnaHQ6IDMycHg7XG4gIH1cbmBcblxuY2xhc3MgRm9vdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGxvZ29VUkxXaXRoUHJlZml4ID0gbmFtZSA9PiBgL2ltYWdlcy8ke25hbWV9YFxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZvb3RXcmFwcGVyPlxuICAgICAgICA8TG9nb1dyYXBwZXI+XG4gICAgICAgICAgPExpbmsgdG89XCIvXCI+XG4gICAgICAgICAgICA8SW1hZ2VMb2dvXG4gICAgICAgICAgICAgIHNyYz17dGhpcy5sb2dvVVJMV2l0aFByZWZpeCgnbG9nb19VWE8td2hpdGUuc3ZnJyl9XG4gICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgPC9Mb2dvV3JhcHBlcj5cbiAgICAgICAgPFBvd2VyZWRCeT5TZXJ2ZSBhbmQgaW5zcGlyZSBieSBVWCBUaGFpbGFuZCwgMjAxODwvUG93ZXJlZEJ5PlxuICAgICAgPC9Gb290V3JhcHBlcj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9vdFxuIl19 */"),B=Object(l.b)("p",{label:"PoweredBy",target:"e10rpm8r2"})("font-size:14px;font-weight:300;color:var(--color_grey_super_light);align-self:center;",X.b.s,"{margin-top:20px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0IwQiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy93YXNhd2F0c29tbm8vRGVza3RvcC9leHRyYS91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ2dhdHNieSdcbmltcG9ydCBtcSBmcm9tICcuLi8uLi91dGlscy9tZWRpYS1xdWVyeSdcblxuY29uc3QgRm9vdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjgyODI4O1xuICBwYWRkaW5nOiAyMHB4IDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgJHttcS5zfSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5gXG5cbmNvbnN0IEltYWdlTG9nbyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNvbnN0IFBvd2VyZWRCeSA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAke21xLnN9IHtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICB9XG5gXG5cbmNvbnN0IExvZ29XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiA1NXB4O1xuICAke21xLmx9IHtcbiAgICBoZWlnaHQ6IDMycHg7XG4gIH1cbmBcblxuY2xhc3MgRm9vdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGxvZ29VUkxXaXRoUHJlZml4ID0gbmFtZSA9PiBgL2ltYWdlcy8ke25hbWV9YFxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZvb3RXcmFwcGVyPlxuICAgICAgICA8TG9nb1dyYXBwZXI+XG4gICAgICAgICAgPExpbmsgdG89XCIvXCI+XG4gICAgICAgICAgICA8SW1hZ2VMb2dvXG4gICAgICAgICAgICAgIHNyYz17dGhpcy5sb2dvVVJMV2l0aFByZWZpeCgnbG9nb19VWE8td2hpdGUuc3ZnJyl9XG4gICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgPC9Mb2dvV3JhcHBlcj5cbiAgICAgICAgPFBvd2VyZWRCeT5TZXJ2ZSBhbmQgaW5zcGlyZSBieSBVWCBUaGFpbGFuZCwgMjAxODwvUG93ZXJlZEJ5PlxuICAgICAgPC9Gb290V3JhcHBlcj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9vdFxuIl19 */"),u=Object(l.b)("div",{label:"LogoWrapper",target:"e10rpm8r3"})("height:55px;",X.b.l,"{height:32px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0Zvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0M4QiIsImZpbGUiOiJzcmMvY29tcG9uZW50cy9Gb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy93YXNhd2F0c29tbm8vRGVza3RvcC9leHRyYS91eHRoIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdyZWFjdC1lbW90aW9uJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ2dhdHNieSdcbmltcG9ydCBtcSBmcm9tICcuLi8uLi91dGlscy9tZWRpYS1xdWVyeSdcblxuY29uc3QgRm9vdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjgyODI4O1xuICBwYWRkaW5nOiAyMHB4IDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgJHttcS5zfSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5gXG5cbmNvbnN0IEltYWdlTG9nbyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogNTVweDtcbiAgJHttcS5sfSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG5gXG5cbmNvbnN0IFBvd2VyZWRCeSA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAke21xLnN9IHtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICB9XG5gXG5cbmNvbnN0IExvZ29XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiA1NXB4O1xuICAke21xLmx9IHtcbiAgICBoZWlnaHQ6IDMycHg7XG4gIH1cbmBcblxuY2xhc3MgRm9vdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGxvZ29VUkxXaXRoUHJlZml4ID0gbmFtZSA9PiBgL2ltYWdlcy8ke25hbWV9YFxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZvb3RXcmFwcGVyPlxuICAgICAgICA8TG9nb1dyYXBwZXI+XG4gICAgICAgICAgPExpbmsgdG89XCIvXCI+XG4gICAgICAgICAgICA8SW1hZ2VMb2dvXG4gICAgICAgICAgICAgIHNyYz17dGhpcy5sb2dvVVJMV2l0aFByZWZpeCgnbG9nb19VWE8td2hpdGUuc3ZnJyl9XG4gICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgPC9Mb2dvV3JhcHBlcj5cbiAgICAgICAgPFBvd2VyZWRCeT5TZXJ2ZSBhbmQgaW5zcGlyZSBieSBVWCBUaGFpbGFuZCwgMjAxODwvUG93ZXJlZEJ5PlxuICAgICAgPC9Gb290V3JhcHBlcj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9vdFxuIl19 */"),x=function(g){function I(){for(var I,C=arguments.length,A=new Array(C),b=0;b<C;b++)A[b]=arguments[b];return(I=g.call.apply(g,[this].concat(A))||this).logoURLWithPrefix=function(g){return"/images/"+g},I}return b()(I,g),I.prototype.render=function(){return c.a.createElement(d,null,c.a.createElement(u,null,c.a.createElement(Z.Link,{to:"/"},c.a.createElement(W,{src:this.logoURLWithPrefix("logo_UXO-white.svg"),alt:""}))),c.a.createElement(B,null,"Serve and inspire by UX Thailand, 2018"))},I}(c.a.Component);I.a=x}}]);
//# sourceMappingURL=component---src-pages-speaker-js-e5d5c402e4c0290d3ba2.js.map